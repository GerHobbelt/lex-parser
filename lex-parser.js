/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lex = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,7],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[2,36],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,27],$Vf=[1,28],$Vg=[1,31],$Vh=[1,29],$Vi=[1,30],$Vj=[5,11,12,14,16,18],$Vk=[11,23,34,37,39,42,43,47,48,49,52,53,54,56,57],$Vl=[2,29],$Vm=[1,39],$Vn=[1,40],$Vo=[5,11,12,14,16,18,23,34,38],$Vp=[5,11,12,14,16,18,23,34,37,38,39,42,43,47,48,49,52,53,54,56,57],$Vq=[1,43],$Vr=[1,42],$Vs=[1,44],$Vt=[1,46],$Vu=[34,38],$Vv=[5,11,12,14,16,18,23,31,34,37,38,39,40,41,42,43,47,48,49,52,53,54,55,56,57],$Vw=[5,11,12,14,16,18,19],$Vx=[5,8,11,23,28,34,37,39,42,43,47,48,49,52,53,54,56,57],$Vy=[30,32],$Vz=[23,25],$VA=[2,21],$VB=[1,75],$VC=[1,78],$VD=[1,79],$VE=[23,25,27];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"lex":3,"definitions":4,"%%":5,"rules":6,"epilogue":7,"EOF":8,"CODE":9,"definition":10,"ACTION":11,"NAME":12,"regex":13,"START_INC":14,"names_inclusive":15,"START_EXC":16,"names_exclusive":17,"UNKNOWN_DECL":18,"START_COND":19,"rule":20,"start_conditions":21,"action":22,"{":23,"action_body":24,"}":25,"action_comments_body":26,"ACTION_BODY":27,"<":28,"name_list":29,">":30,"*":31,",":32,"regex_list":33,"|":34,"regex_concat":35,"regex_base":36,"(":37,")":38,"SPECIAL_GROUP":39,"+":40,"?":41,"/":42,"/!":43,"name_expansion":44,"range_regex":45,"any_group_regex":46,".":47,"^":48,"$":49,"string":50,"escape_char":51,"NAME_BRACE":52,"ANY_GROUP_REGEX":53,"ESCAPE_CHAR":54,"RANGE_REGEX":55,"STRING_LIT":56,"CHARACTER_LIT":57,"$accept":0,"$end":1},
terminals_: {2:"error",5:"%%",8:"EOF",9:"CODE",11:"ACTION",12:"NAME",14:"START_INC",16:"START_EXC",18:"UNKNOWN_DECL",19:"START_COND",23:"{",25:"}",27:"ACTION_BODY",28:"<",30:">",31:"*",32:",",34:"|",37:"(",38:")",39:"SPECIAL_GROUP",40:"+",41:"?",42:"/",43:"/!",47:".",48:"^",49:"$",52:"NAME_BRACE",53:"ANY_GROUP_REGEX",54:"ESCAPE_CHAR",55:"RANGE_REGEX",56:"STRING_LIT",57:"CHARACTER_LIT"},
productions_: [0,[3,4],[7,1],[7,2],[7,3],[4,2],[4,2],[4,0],[10,2],[10,2],[10,2],[10,1],[15,1],[15,2],[17,1],[17,2],[6,2],[6,1],[20,3],[22,3],[22,1],[24,0],[24,1],[24,5],[24,4],[26,1],[26,2],[21,3],[21,3],[21,0],[29,1],[29,3],[13,1],[33,3],[33,2],[33,1],[33,0],[35,2],[35,1],[36,3],[36,3],[36,2],[36,2],[36,2],[36,2],[36,2],[36,1],[36,2],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[44,1],[46,1],[51,1],[45,1],[50,1],[50,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

          this.$ = { rules: $$[$0-1] };
          if ($$[$0-3][0]) this.$.macros = $$[$0-3][0];
          if ($$[$0-3][1]) this.$.startConditions = $$[$0-3][1];
          if ($$[$0-3][2]) this.$.unknownDecls = $$[$0-3][2];
          if ($$[$0]) this.$.moduleInclude = $$[$0];
          if (yy.options) this.$.options = yy.options;
          if (yy.actionInclude) this.$.actionInclude = yy.actionInclude;
          delete yy.options;
          delete yy.actionInclude;
          return this.$;
        
break;
case 2: case 3:
 this.$ = null; 
break;
case 4: case 27:
 this.$ = $$[$0-1]; 
break;
case 5:

          this.$ = $$[$0];
          if ('length' in $$[$0-1]) {
            this.$[0] = this.$[0] || {};
            this.$[0][$$[$0-1][0]] = $$[$0-1][1];
          } else if ($$[$0-1].type === 'names') {
            this.$[1] = this.$[1] || {};
            for (var name in $$[$0-1].names) {
              this.$[1][name] = $$[$0-1].names[name];
            }
          } else if ($$[$0-1].type === 'unknown') {
            this.$[2] = this.$[2] || [];
            this.$[2].push($$[$0-1].body);
          }
        
break;
case 6:
 yy.actionInclude += $$[$0-1]; this.$ = $$[$0]; 
break;
case 7:
 yy.actionInclude = ''; this.$ = [null,null]; 
break;
case 8:
 this.$ = [$$[$0-1], $$[$0]]; 
break;
case 9: case 10:
 this.$ = $$[$0]; 
break;
case 11:
 this.$ = {type: 'unknown', body: $$[$0]}; 
break;
case 12:
 this.$ = {type: 'names', names: {}}; this.$.names[$$[$0]] = 0; 
break;
case 13:
 this.$ = $$[$0-1]; this.$.names[$$[$0]] = 0; 
break;
case 14:
 this.$ = {type: 'names', names: {}}; this.$.names[$$[$0]] = 1; 
break;
case 15:
 this.$ = $$[$0-1]; this.$.names[$$[$0]] = 1; 
break;
case 16:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 17: case 30:
 this.$ = [$$[$0]]; 
break;
case 18:
 this.$ = $$[$0-2] ? [$$[$0-2], $$[$0-1], $$[$0]] : [$$[$0-1],$$[$0]]; 
break;
case 19:
this.$ = $$[$0-1];
break;
case 20: case 22:
this.$ = $$[$0];
break;
case 21:
this.$ = '';
break;
case 23:
this.$ = $$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 24:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 25: case 55: case 56: case 57:
 this.$ = yytext; 
break;
case 26:
 this.$ = $$[$0-1]+$$[$0]; 
break;
case 28:
 this.$ = ['*']; 
break;
case 31:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 32:

          this.$ = $$[$0];
          if (!(yy.options && yy.options.flex) && this.$.match(/[\w\d]$/) && !this.$.match(/\\(r|f|n|t|v|s|b|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}|[0-7]{1,3})$/)) {
              this.$ += "\\b";
          }
        
break;
case 33:
 this.$ = $$[$0-2] + '|' + $$[$0]; 
break;
case 34:
 this.$ = $$[$0-1] + '|'; 
break;
case 36:
 this.$ = '' 
break;
case 37: case 47:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 39:
 this.$ = '(' + $$[$0-1] + ')'; 
break;
case 40:
 this.$ = $$[$0-2] + $$[$0-1] + ')'; 
break;
case 41:
 this.$ = $$[$0-1] + '+'; 
break;
case 42:
 this.$ = $$[$0-1] + '*'; 
break;
case 43:
 this.$ = $$[$0-1] + '?'; 
break;
case 44:
 this.$ = '(?=' + $$[$0] + ')'; 
break;
case 45:
 this.$ = '(?!' + $$[$0] + ')'; 
break;
case 49:
 this.$ = '.'; 
break;
case 50:
 this.$ = '^'; 
break;
case 51:
 this.$ = '$'; 
break;
case 58:
 this.$ = prepareString(yytext.substr(1, yytext.length - 2)); 
break;
}
},
table: [{3:1,4:2,5:$V0,10:3,11:$V1,12:$V2,14:$V3,16:$V4,18:$V5},{1:[3]},{5:[1,9]},{4:10,5:$V0,10:3,11:$V1,12:$V2,14:$V3,16:$V4,18:$V5},{4:11,5:$V0,10:3,11:$V1,12:$V2,14:$V3,16:$V4,18:$V5},o([5,11,12,14,16,18,34],$V6,{13:12,33:13,35:14,36:15,44:20,46:21,50:25,51:26,37:$V7,39:$V8,42:$V9,43:$Va,47:$Vb,48:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,56:$Vh,57:$Vi}),{15:32,19:[1,33]},{17:34,19:[1,35]},o($Vj,[2,11]),o($Vk,$Vl,{6:36,20:37,21:38,28:$Vm}),{5:[2,5]},{5:[2,6]},o($Vj,[2,8]),o([5,11,12,14,16,18,23],[2,32],{34:$Vn}),o($Vo,[2,35],{44:20,46:21,50:25,51:26,36:41,37:$V7,39:$V8,42:$V9,43:$Va,47:$Vb,48:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,56:$Vh,57:$Vi}),o($Vp,[2,38],{45:45,31:$Vq,40:$Vr,41:$Vs,55:$Vt}),o($Vu,$V6,{35:14,36:15,44:20,46:21,50:25,51:26,33:47,37:$V7,39:$V8,42:$V9,43:$Va,47:$Vb,48:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,56:$Vh,57:$Vi}),o($Vu,$V6,{35:14,36:15,44:20,46:21,50:25,51:26,33:48,37:$V7,39:$V8,42:$V9,43:$Va,47:$Vb,48:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,56:$Vh,57:$Vi}),{36:49,37:$V7,39:$V8,42:$V9,43:$Va,44:20,46:21,47:$Vb,48:$Vc,49:$Vd,50:25,51:26,52:$Ve,53:$Vf,54:$Vg,56:$Vh,57:$Vi},{36:50,37:$V7,39:$V8,42:$V9,43:$Va,44:20,46:21,47:$Vb,48:$Vc,49:$Vd,50:25,51:26,52:$Ve,53:$Vf,54:$Vg,56:$Vh,57:$Vi},o($Vv,[2,46]),o($Vv,[2,48]),o($Vv,[2,49]),o($Vv,[2,50]),o($Vv,[2,51]),o($Vv,[2,52]),o($Vv,[2,53]),o($Vv,[2,54]),o($Vv,[2,55]),o($Vv,[2,58]),o($Vv,[2,59]),o($Vv,[2,56]),o($Vj,[2,9],{19:[1,51]}),o($Vw,[2,12]),o($Vj,[2,10],{19:[1,52]}),o($Vw,[2,14]),o($Vk,$Vl,{21:38,7:53,20:54,5:[1,56],8:[1,55],28:$Vm}),o($Vx,[2,17]),o([11,23,34],$V6,{33:13,35:14,36:15,44:20,46:21,50:25,51:26,13:57,37:$V7,39:$V8,42:$V9,43:$Va,47:$Vb,48:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,56:$Vh,57:$Vi}),{12:[1,60],29:58,31:[1,59]},o($Vo,[2,34],{36:15,44:20,46:21,50:25,51:26,35:61,37:$V7,39:$V8,42:$V9,43:$Va,47:$Vb,48:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,56:$Vh,57:$Vi}),o($Vp,[2,37],{45:45,31:$Vq,40:$Vr,41:$Vs,55:$Vt}),o($Vv,[2,41]),o($Vv,[2,42]),o($Vv,[2,43]),o($Vv,[2,47]),o($Vv,[2,57]),{34:$Vn,38:[1,62]},{34:$Vn,38:[1,63]},o($Vp,[2,44],{45:45,31:$Vq,40:$Vr,41:$Vs,55:$Vt}),o($Vp,[2,45],{45:45,31:$Vq,40:$Vr,41:$Vs,55:$Vt}),o($Vw,[2,13]),o($Vw,[2,15]),{1:[2,1]},o($Vx,[2,16]),{1:[2,2]},{8:[1,64],9:[1,65]},{11:[1,68],22:66,23:[1,67]},{30:[1,69],32:[1,70]},{30:[1,71]},o($Vy,[2,30]),o($Vo,[2,33],{44:20,46:21,50:25,51:26,36:41,37:$V7,39:$V8,42:$V9,43:$Va,47:$Vb,48:$Vc,49:$Vd,52:$Ve,53:$Vf,54:$Vg,56:$Vh,57:$Vi}),o($Vv,[2,39]),o($Vv,[2,40]),{1:[2,3]},{8:[1,72]},o($Vx,[2,18]),o($Vz,$VA,{24:73,26:74,27:$VB}),o($Vx,[2,20]),o($Vk,[2,27]),{12:[1,76]},o($Vk,[2,28]),{1:[2,4]},{23:$VC,25:[1,77]},o($Vz,[2,22],{27:$VD}),o($VE,[2,25]),o($Vy,[2,31]),o($Vx,[2,19]),o($Vz,$VA,{26:74,24:80,27:$VB}),o($VE,[2,26]),{23:$VC,25:[1,81]},o($Vz,[2,24],{26:82,27:$VB}),o($Vz,[2,23],{27:$VD})],
defaultActions: {10:[2,5],11:[2,6],53:[2,1],55:[2,2],64:[2,3],72:[2,4]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function encodeRE (s) {
    return s.replace(/([.*+?^${}()|[\]\/\\])/g, '\\$1').replace(/\\\\u([a-fA-F0-9]{4})/g,'\\u$1');
}

function prepareString (s) {
    // unescape slashes
    s = s.replace(/\\\\/g, "\\");
    s = encodeRE(s);
    return s;
};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 27;
break;
case 1:return 27;
break;
case 2:return 27; // regexp with braces or quotes (and no spaces)
break;
case 3:return 27;
break;
case 4:return 27;
break;
case 5:return 27;
break;
case 6:return 27;
break;
case 7:yy.depth++; return 23
break;
case 8:yy.depth == 0 ? this.begin('trail') : yy.depth--; return 25
break;
case 9:return 12;
break;
case 10:this.popState(); return 30;
break;
case 11:return 32;
break;
case 12:return 31;
break;
case 13:/* */
break;
case 14:/* */
break;
case 15:this.begin('indented')
break;
case 16:this.begin('code'); return 5
break;
case 17:return 57
break;
case 18:yy.options[yy_.yytext] = true
break;
case 19:this.begin('INITIAL')
break;
case 20:this.begin('INITIAL')
break;
case 21:/* empty */
break;
case 22:return 19
break;
case 23:this.begin('INITIAL')
break;
case 24:this.begin('INITIAL')
break;
case 25:/* empty */
break;
case 26:this.begin('rules')
break;
case 27:yy.depth = 0; this.begin('action'); return 23
break;
case 28:this.begin('trail'); yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length-4);return 11
break;
case 29:yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length-4); return 11
break;
case 30:this.begin('rules'); return 11
break;
case 31:/* ignore */
break;
case 32:/* ignore */
break;
case 33:/* */
break;
case 34:/* */
break;
case 35:return 12;
break;
case 36:yy_.yytext = yy_.yytext.replace(/\\"/g,'"'); return 56;
break;
case 37:yy_.yytext = yy_.yytext.replace(/\\'/g,"'"); return 56;
break;
case 38:return 34;
break;
case 39:return 53;
break;
case 40:return 39;
break;
case 41:return 39;
break;
case 42:return 39;
break;
case 43:return 37;
break;
case 44:return 38;
break;
case 45:return 40;
break;
case 46:return 31;
break;
case 47:return 41;
break;
case 48:return 48;
break;
case 49:return 32;
break;
case 50:return 49;
break;
case 51:this.begin('conditions'); return 28;
break;
case 52:return 43;
break;
case 53:return 42;
break;
case 54:return 54;
break;
case 55:yy_.yytext = yy_.yytext.replace(/^\\/g,''); return 54;
break;
case 56:return 49;
break;
case 57:return 47;
break;
case 58:yy.options = {}; this.begin('options');
break;
case 59:this.begin('start_condition'); return 14;
break;
case 60:this.begin('start_condition'); return 16;
break;
case 61:this.begin('rules'); return 5;
break;
case 62:return 18;
break;
case 63:return 55;
break;
case 64:return 52;
break;
case 65:return 23;
break;
case 66:return 25;
break;
case 67:/* ignore bad characters */
break;
case 68:return 8;
break;
case 69:return 9;
break;
}
},
rules: [/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/\/.*)/,/^(?:\/[^ \/]*?['"{}'][^ ]*?\/)/,/^(?:"(\\\\|\\"|[^"])*")/,/^(?:'(\\\\|\\'|[^'])*')/,/^(?:[\/"'][^{}\/"']+)/,/^(?:[^{}\/"']+)/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z_][a-zA-Z0-9_-]*))/,/^(?:>)/,/^(?:,)/,/^(?:\*)/,/^(?:(\r\n|\n|\r)+)/,/^(?:\s+(\r\n|\n|\r)+)/,/^(?:\s+)/,/^(?:%%)/,/^(?:[a-zA-Z0-9_]+)/,/^(?:([a-zA-Z_][a-zA-Z0-9_-]*))/,/^(?:(\r\n|\n|\r)+)/,/^(?:\s+(\r\n|\n|\r)+)/,/^(?:\s+)/,/^(?:([a-zA-Z_][a-zA-Z0-9_-]*))/,/^(?:(\r\n|\n|\r)+)/,/^(?:\s+(\r\n|\n|\r)+)/,/^(?:\s+)/,/^(?:.*(\r\n|\n|\r)+)/,/^(?:\{)/,/^(?:%\{(.|(\r\n|\n|\r))*?%\})/,/^(?:%\{(.|(\r\n|\n|\r))*?%\})/,/^(?:.+)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/\/.*)/,/^(?:(\r\n|\n|\r)+)/,/^(?:\s+)/,/^(?:([a-zA-Z_][a-zA-Z0-9_-]*))/,/^(?:"(\\\\|\\"|[^"])*")/,/^(?:'(\\\\|\\'|[^'])*')/,/^(?:\|)/,/^(?:\[(\\\\|\\\]|[^\]])*\])/,/^(?:\(\?:)/,/^(?:\(\?=)/,/^(?:\(\?!)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:\*)/,/^(?:\?)/,/^(?:\^)/,/^(?:,)/,/^(?:<<EOF>>)/,/^(?:<)/,/^(?:\/!)/,/^(?:\/)/,/^(?:\\([0-7]{1,3}|[rfntvsSbBwWdD\\*+()${}|[\]\/.^?]|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}))/,/^(?:\\.)/,/^(?:\$)/,/^(?:\.)/,/^(?:%options\b)/,/^(?:%s\b)/,/^(?:%x\b)/,/^(?:%%)/,/^(?:%[a-zA-Z]+[^\r\n]*)/,/^(?:\{\d+(,\s?\d+|,)?\})/,/^(?:\{([a-zA-Z_][a-zA-Z0-9_-]*)\})/,/^(?:\{)/,/^(?:\})/,/^(?:.)/,/^(?:$)/,/^(?:(.|(\r\n|\n|\r))+)/],
conditions: {"code":{"rules":[68,69],"inclusive":false},"start_condition":{"rules":[22,23,24,25,68],"inclusive":false},"options":{"rules":[18,19,20,21,68],"inclusive":false},"conditions":{"rules":[9,10,11,12,68],"inclusive":false},"action":{"rules":[0,1,2,3,4,5,6,7,8,68],"inclusive":false},"indented":{"rules":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true},"trail":{"rules":[26,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true},"rules":{"rules":[13,14,15,16,17,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true},"INITIAL":{"rules":[29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lex;
exports.Parser = lex.Parser;
exports.parse = function () { return lex.parse.apply(lex, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}